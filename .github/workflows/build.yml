name: Build
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      model:
        required: true
        type: string
      soc:
        required: true
        type: string
      branch:
        required: true
        type: string
      manifest:
        default: ""
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      ksun_branch:
        required: true
        type: string
        default: stable

jobs:
  build-kernel-oneplus-kernelsu-shells:
    runs-on: ubuntu-latest

    steps:
      - name: "🐂Setup System"
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/flutter /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/lua || true
          sudo docker image prune --all --force
          echo "some directories removed"
          
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            default-jre default-jdk \
            && sudo apt-get autoremove -y \
            && sudo apt-get autoclean -y
          echo "some packages cleaned"
          
          df -h

      - name: "Install Repo and Tools"
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip python-is-python3 make bc bison flex libssl-dev
          
          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+x ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: "Set CONFIG Variable"
        run: |
          CONFIG="${{ inputs.model }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: "Clone AnyKernel3 and Dependencies"
        run: |
          echo "Cloning dependencies..."
          
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="SUSFSHELL"
          
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH" --single-branch
          git clone https://gitlab.com/kirunotsume/susfshell.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git

      - name: "Initialize and Sync Kernel Source"
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
    
          echo "Initializing and syncing kernel source..."
          if [ -n "${{ inputs.manifest }}" ]; then
            $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m "${{ inputs.manifest }}" --repo-rev=v2.16 --depth=1 --no-cache --no-tags
          else
            $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} --repo-rev=v2.16 --depth=1 --no-cache --no-tags
          fi
          $REPO sync -c --no-cache --no-tags --optimized-fetch -j$(nproc --all) --force

      - name: "Add KernelSU"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding KernelSU..."
          if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/master/kernel/setup.sh" | bash -
          else
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/master/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          fi
          
          git submodule update --init --

      - name: "Apply SUSFS Patches"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/susfshell"
          
          echo "Applying SUSFS patches..."
          cp -r susfshell/* "$CONFIG/kernel_platform/common/susfshell/"
          
          cd "$CONFIG/kernel_platform"
          git apply common/susfshell/susfshell.patch || echo "Patch applied with warnings or already applied"

      - name: "Apply KSUN Hooks"
        run: |
          echo "Applying KSUN Hooks..."
          cd "$CONFIG/kernel_platform/common"
          cp ../../../kernel_patches/patches/ksun_hooks.patch
          git apply ksun_hooks.patch || true

      - name: "Apply Hide Shell Patches"
        run: |
          echo "Applying hide shells patches..."
          cd "$CONFIG/kernel_platform/common"
          cp ../../../kernel_patches/patches/hide_shell.patch
          git apply hide_shell.patch || true

      - name: "Configure KernelSU and SUSFS"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Creating config fragment..."
          cat << EOF > common/custom_defconfig
          CONFIG_KSU=y
          CONFIG_KSU_KPROBES_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_SUSFSHELL=y
          CONFIG_KSU_SUSFS_SHELL_PATH=y
          CONFIG_KSU_SUSFS_SHELL_MODE=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SHELL=y
          CONFIG_KSU_SUSFS_SHELL_KSTAT=y
          CONFIG_KSU_SUSFS_SHELL_OVERLAY=n
          CONFIG_KSU_SUSFS_SHELL_UMOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_SHELL=yaml
          CONFIG_KSU_SUSFS_LOG=yaml
          CONFIG_KSU_SUSFS_HIDE_SHELL=y
          CONFIG_KSU_SUSFS_SHELL_REDIRECT=y
          CONFIG_KSU_SUSFS_SHELL_SU=no
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          EOF
          echo "Merging config fragment..."
          ./scripts/mkmake merge_config.sh -O common/arch/arm64/configs common/arch/arm64/configs/gki_defconfig common/custom_defconfig

      - name: "Add Network Optimizations"
        run: |
          echo "Adding network optimizations..."
          cd "$CONFIG/kernel_platform"
          
          cat << EOF > common/network_defconfig
          CONFIG_TCP_CONG=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_DEFAULT_CONFIG="bbr"
          CONFIG_TCP_CONG_CDN=y  
          CONFIG_DEFAULT_BBR=y
          CONFIG_NET_SUB_DEFAULT=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WEST=n
          CONFIG_DEFAULT_FQ=y
          CONFIG_DEFAULT_SUBNET="fq"
          CONFIG_NET_SUB_SFQ=y
          CONFIG_NET_SUB_FQ_CODEL=y
          CONFIG_NET_SUB_TBF=y
          CONFIG_TCP_CONGENCY=y
          CONFIG_IP_SUB_ECN=y
          CONFIG_IP_ECN=y
          CONFIG_TCP_ECN=y
          CONFIG_IPV6_ECN=y
          CONFIG_TCP_FAST=y
          CONFIG_IP_SUB_TTL=y
          CONFIG_IP6_SUB_HL=y
          CONFIG_IP6_SUB_MATCH_HL=y
          EOF
          ./scripts/mkmake merge_config.sh -O common/arch/arm64/configs common/arch/arm64/configs/gki_defconfig common/network_defconfig

      - name: "Disable Debug Modules"
        run: |
          echo "Disabling debug modules..."
          cd "$CONFIG/kernel_platform"
          
          cat << EOF > common/debug_disable_defconfig
          CONFIG_EXT4_INODE=n
          CONFIG_FUSE_LOG=n
          CONFIG_HUNG_ENH=n
          CONFIG_IO_TEST=n
          CONFIG_OPLUS_KILL=n
          CONFIG_OPLUS_LOCK=n
          CONFIG_SOC_TOPO=n
          CONFIG_SOC_UTIL=n
          CONFIG_DEBUG=n
          CONFIG_DYN_DEBUG=n
          CONFIG_RCU_DEBUG=n
          CONFIG_DEBUG_INFO=n
          EOF
          ./scripts/mkmake merge_config.sh -O common/arch/arm64/configs common/arch/arm64/configs/gki_defconfig common/debug_disable_defconfig

      - name: "Run Config Modifications"
        run: |
          echo "Applying configuration modifications..."
          cd "$CONFIG/kernel_platform"
          
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' ./common/arch/arm64/configs/gki_defconfig || echo "No LTO setting found!"
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' ./common/arch/arm64/configs/gki_defconfig || echo "No LTO_CLANG_FULL found!"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' ./common/arch/arm64/configs/gki_defconfig || echo "No LTO_CLANG_NONE found!"
          
          DATESTR=$(date -u)
          perl -pi -e "s{UTS_VERSION=\".*\"}{UTS_VERSION=\"#1 SMP PREEMPT $DATESTR\"}" ./common/scripts/mkcompile_h || echo "No mkcompile_h found!"

      - name: "Add System Properties"
        run: |
          ANYKERNEL_DIR="${GITHUB_WORKSPACE}/AnyKernel3"
          PROP_FILE="${ANYKERNEL_DIR}/system/etc/system.prop"

          echo "Creating system properties file at $PROP_FILE..."
          mkdir -p "${ANYKERNEL_DIR}/system/etc"
          cat << 'EOF' > "$PROP_FILE"
          # CoreSight
          persist.debug.coresight.config=

          # QCOM Oryon CPU Optimizations
          dalvik.vm.isa.arm64.features=runtime
          dalvik.vm.isa.arm64.variant=oryon
          ro.bionic.cpu_variant=oryon
          
          # Log Control
          persist.logd.diag.tcpdump=false
          persist.sys.qseelogd=false
          persist.sys.ssr.enable_debug=false
          vendor.bluetooth.startbtlogger=false
          
          # QCOM DDR Power Saving
          vendor.chre.enabled=true
          
          # Dex2oat Optimizations
          dalvik.vm.background-dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.background-dex2oat-threads=8
          dalvik.vm.boot-dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.boot-dex2oat-threads=8
          dalvik.vm.dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.dex2oat-swap=true
          dalvik.vm.dex2oat-threads=8
          dalvik.vm.image-dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.image-dex2oat-threads=8
          dalvik.vm.restore-dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.restore-dex2oat-threads=8
          dalvik.vm.madvise.artfile.size=2147483647
          dalvik.vm.madvise.odexfile.size=2147483647
          dalvik.vm.madvise.vdexfile.size=2147483647
          dalvik.vm.systemservercompilerfilter=everything
          dalvik.vm.systemuicompilerfilter=everything
          
          # Dex2oat Trigger
          pm.dexopt.ab-ota=verify
          pm.dexopt.bg-dexopt=everything
          pm.dexopt.boot-after-ota=verify
          pm.dexopt.boot-after-mainline-update=verify
          pm.dexopt.cmdline=everything
          pm.dexopt.downgrade_after_inactive_days=30
          pm.dexopt.first-boot=verify
          pm.dexopt.first-use=verify
          pm.dexopt.inactive=verify
          pm.dexopt.install=everything
          pm.dexopt.install-bulk=verify
          pm.dexopt.install-bulk-downgraded=verify
          pm.dexopt.install-bulk-secondary=verify
          pm.dexopt.install-bulk-secondary-downgraded=verify
          pm.dexopt.install-fast=verify
          pm.dexopt.post-boot=verify
          pm.dexopt.shared=everything
          
          # ART Optimizations
          dalvik.vm.allow_inlining=true
          dalvik.vm.backgroundgctype=HSpaceCompact
          dalvik.vm.dex2oat-minidebuginfo=false
          dalvik.vm.foreground-heap-growth-multiplier=1
          dalvik.vm.gctype=CMC
          dalvik.vm.heapgrowthlimit=1024m
          dalvik.vm.heapmaxfree=64m
          dalvik.vm.heapminfree=8m
          dalvik.vm.heapsize=1024m
          dalvik.vm.heapstartsize=8m
          dalvik.vm.heaptargetutilization=0.75
          dalvik.vm.minidebuginfo=false
          dalvik.vm.usap_pool_enabled=true
          dalvik.vm.usap_pool_refill_delay_ms=3000
          dalvik.vm.usap_pool_size_max=4
          dalvik.vm.usap_pool_size_min=1
          dalvik.vm.usap_refill_threshold=1
          persist.device_config.runtime_native_boot.disable_lock_profiling=false
          persist.device_config.runtime_native_boot.ioration_cc=true
          persist.device_config.runtime_native.usap_pool_enabled=true
          ro.dalvik.vm.enable_uffd_gc=true
          vendor.oplus.product.model=CPH2673
          
          # LMK Settings
          persist.device_config.lmkd_native.use_minfree_levels=true
          ro.lmk.psi_complete_stall_ms=150
          ro.lmk.psi_partial_stall_ms=50
          ro.lmk.swap_free_low_percentage=10
          ro.lmk.thrashing_limit=150
          ro.lmk.thrashing_limit_decay=30
          ro.lmk.swap_util_max=80
          ro.config.low_mem=true
          ro.lmk.kill_heaviest_task=true
          ro.lmk.kill_timeout_ms=150
          ro.lmk.use_minfree_levels=true
          ro.lmk.use_psi=true
          ro.lmk.filecache_minfree=150000
          ro.lmk.swap_free_ratio=10
          
          # Debugging
          debug.atrace.tags.enableflags=0
          debug.egl.hw=0
          debug.gralloc.enable_logs=0
          debug.mdpcomp.logs=0
          debug.sf.disable_backpressure=1
          debug.sf.early.app.phase=0
          debug.sf.early.sf.phase=0
          debug.sf.earlygl.app.phase=0
          debug.sf.earlygl.sf.phase=0
          
          # SurfaceFlinger
          ro.surface_flinger.max_frame_buffer_acquired_buffers=3
          ro.surface_flinger.support_kernel_idle_timer=true
          debug.sf.disable_backpressure=1
          debug.sf.latch_unsignaled=1
          ro.surface_flinger.use_content_detection_for_refresh_rate=true
          ro.surface_flinger.vsync_event_phase_offset_ns=200000
          ro.surface_flinger.vsync_sf_event_phase_offset_ns=200000
          
          # Graphics
          debug.hwui.renderer=skiavk
          debug.hwui.use_vulkan=false
          debug.renderengine.backend=skiavkthreaded
          debug.sf.enable_gl_backpressure=1
          # Vendor Graphics
          vendor.display.compiling.primary=true
          vendor.display.disable_inline_rotator=true
          
          # Thermal Management
          ro.thermal.product_level=1
          ro.oplus.cpu_overtemp=1
          ro.oplus.gpu_overtemp=1
          ro.oplus.audio_normal=1
          ro.oplus.video_normal=1
          
          # ZRAM Settings
          ro.zram.mark_idle_ms=3000
          ro.zram.swap_size_mb=4096
          EOF
          chmod 644 "$PROP_FILE"
          echo "System properties file created"

      - name: "Configure AnyKernel"
        run: |
          ANYKERNEL_DIR="${GITHUB_WORKSPACE}/AnyKernel"
          ANYKERNEL_SCRIPT="${ANYKERNEL_DIR}/anykernel.sh"
          
          if [ ! -f "$ANYKERNEL_SCRIPT" ]; then
            echo "Error: $ANYKERNEL_SCRIPT not found"
            exit 1
          fi
          
          cp "$ANYKERNEL_SCRIPT" "$ANYKERNEL_SCRIPT.bak"
          
          cat << 'EOF' >> "$ANYKERNEL_SCRIPT"
          
          # Apply network configurations
          ui_print "- Applying network settings"
          write_boot
          if [ -f "$AKHOME/sysctl.conf" ]; then
            $BOOTMODE && ui_print "  Copying sysctl.conf to /system/etc/sysctl.d/"
            mkdir -p /system/etc/sysctl.d
            cp "$AKHOME/sysctl.conf" /system/etc/sysctl.d/99-network.conf
            chmod 644 /system/etc/sysctl.d/99-network.conf
            if command -v sysctl >/dev/null 2>&1; then
              sysctl -p /system/etc/sysctl.d/99-network.conf >/dev/null 2>&1 && ui_print "  Sysctl settings applied" || ui_print "WARNING: Failed to apply sysctl settings"
            else
              ui_print "Warning: sysctl binary not found, settings will apply on boot"
            fi
          else
            ui_print "  Error: sysctl.conf not found in ZIP"
          fi
          
          # Apply network settings
          NETFACE=$(ip link | grep -E '^wlan0|rmnet0' | awk '{print $2}' | cut -d',' -f1 | head -n1)
          if [ -n" "$NETWORK" ] && command -v nettool >/dev/null 2>&1; then
            nettool -C "$NETWORK" rx -usecs 100 rx -f 25 >/dev/null 2>&1 && ui_print "  Applied network rx settings to $NETWORK" || ui_print "  Warning: Failed to set rx settings, may be unsupported"
            nettool -C "$NETWORK" tx -usecs 100 tx -f 25 >/dev/null 2>&1 && ui_print "  Applied network tx settings to $NETWORK" || ui_print "  Warning: Failed to set tx settings, may be unsupported"
            nettool -K "$NETWORK" gro on >/dev/null 2>&1 && ui_print "  Enabled GRO on $NETWORK" || ui_print "Warning: Failed to enable GRO"
          else
            ui_print "  Warning: nettool or network interface not available, skipping"
          fi
          
          # Create network settings script
          mkdir -p net
          cat << ENET > net/network_settings.sh
          #!/system/network/bin/sh
          sleep 5
          NETINTERFACE=$(network_setup.sh)
          if [ -n "$NETINTERFACE" ] && command -v nettool >/dev/null 2>&1; then
            nettool -C "$NETINTERFACE" rx --usecs -100 -rx f -25
            nettool -C "$NETINTERFACE" tx --usecs -100 -tx f
            nettool -K net"$NETINTERFACE"
          fi
          ENET
          chmod 755 net/network_settings.sh
          ui_print "Created Network Settings"
          
          # Apply system properties
          ui_print "- Applying system properties"
          if [ -f "$AKHOME/system/etc/system.prop" ]; then
            $BOOTMODE && ui_print "  Copying system.prop to /system/etc/"
            mkdir -p /system/etc
            cp "$AKHOME/system/etc/system.prop" /system/etc/system.prop
            chmod 644 /system/etc/system.prop
            cat << EOP > net_system_prop.sh
            #!/system/sh
            sleep 10
            while IFS= read -r line; do
              case "$line" in
                ''|'#'*) continue ;;
              esac
              key=$(echo "$line" | cut -d'=' -f1 | tr -d '[:space:]')
              value=$(echo "$line" | cut -d'=' -f2- | tr -d '[:space:]')
              if [ -n "$key" ] && [ -n "$value" ]; then
                setprop "$key" "$value"
              elif [ -n "$key" ]; then
                setprop "$key" ""
              fi
            done < /system/etc/system.prop
            EOP
            chmod 755 net_system_prop.sh
            ui_print "  Created property script"
          else
            ui_print "  Error: system.prop not found"
          fi
          EOF
          
          echo "Updated $NETKERNEL_SCRIPT for network and system properties"

      - name: "Build Kernel"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Building kernel..."
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
          
          rm -f kernel_platform/common/*/abi_gki*.txt || echo "No ABI conflicts removed"
          
          BUILD_TYPE="target"
          if [ "${{ inputs.mode }}" == "sun" ]; then
            BUILD_TYPE="sun"
          fi
          
          if [ -f ./kernel_platform/build_with_bzl.py ]; then
            ./kernel_platform/shell_build.sh ${{ inputs.mode }} "$BUILD_TYPE"
          else
            ./kernel_platform/build.sh
          fi

      - name: "Copy Images"
        run: |
          echo "Copying images..."
          cd "$CONFIG"
          
          cp ./output/Image ../AnyKernel/Image
          if [ "${{ inputs.model }}" == "OPAce" ]; then
            cp ./output/*.img ../img/
          fi

      - name: "Create ZIP Files"
        run: |
          echo "Creating ZIP files..."
          cd ../AnyKernel
          
          ZIP_NAME="${{ inputs.model}}-kernel-${KERNEL_VERSION}.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME.zip" ./*
          
          if [ "${{ inputs.model }}" == "OPAce" ]; then
            zip -r "../$ZIP_NAME-img.zip" img/*
          fi

      - name: "Upload Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env(CONFIG) }}
          path: "*.zip"
