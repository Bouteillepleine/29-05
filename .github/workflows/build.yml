name: Build
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      model:
        required: true
        type: string
      soc:
        required: true
        type: string
      branch:
        required: true
        type: string
      manifest:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      ksun_branch:
        required: true
        type: string
        default: stable

jobs:
  build-kernel-oneplus-kernelsu-susfs:
    runs-on: ubuntu-latest

    steps:
      - name: "üêÇSetup System"
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org microsoft-edge-stable || true
          
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"
          
          df -h

      - name: "‚≠êInstall Repo and Python"
        run: |
          sudo apt update
          sudo apt install -y python3 python-is-python3 make bc bison flex libssl-dev
          
          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: "‚≠êSet CONFIG Environment Variable"
        run: |
          CONFIG="${{ inputs.model }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: "‚≠êClone AnyKernel3 and Other Dependencies"
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH" --single-branch
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git

      - name: "‚≠êInitialize and Sync Kernel Source"
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
    
          echo "Initializing and syncing kernel source..."
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
          $REPO sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all)
          wget https://github.com/reigadegr/Action-Build/raw/gki_official/fengchi.patch
          if [ -f "fengchi.patch" ]; then
            cd kernel_platform/common
            patch -p1 < ../../fengchi.patch || true
            cd ../..
          fi

      - name: "‚≠êAdd KernelSU Next"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
          else
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          fi
          
          git submodule update --init --recursive

      - name: "‚≠êApply SUSFS Patches"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cd ./KernelSU-Next
          
          if [ "${{ inputs.ksun_branch }}" == "stable" ] || [ "${{ inputs.ksun_branch }}" == "next" ]; then
            cp ../../../kernel_patches/next/0001-kernel-patch-susfs-v1.5.7-to-KernelSU-Next-v1.0.7.patch ./ksun_susfs_latest.patch
            patch -p1 --forward < ksun_susfs_latest.patch || true
          fi
          
          case "${{ inputs.ksun_branch }}" in
            next|stable)
              BASE_VERSION=10200
              ;;
            next-susfs|next-susfs-dev)
              BASE_VERSION=10198
              ;;
            *)
              BASE_VERSION=10200
              ;;
          esac
          
          cd ./kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
          
          cd ../../common
          if [ "${{ inputs.soc }}" == "sun" ]; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace/hooks/fs.h>' ./fs/namespace.c
          fi
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true

      - name: "‚≠êApply KSUN Hooks"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          cp ../../../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 --fuzz=3 < ./syscall_hooks.patch || true

      - name: "‚≠êApply Hide Stuff Patches"
        run: |
          cd "$CONFIG/kernel_platform/common"
          cp ../../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch || true

      - name: "üòãConfigure KernelSU and SUSFS"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          cat << EOF > common/ksu_susfs_defconfig
          CONFIG_KSU=y
          CONFIG_KSU_KPROBES_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          EOF
          ./scripts/kconfig/merge_config.sh -O common/arch/arm64/configs common/arch/arm64/configs/gki_defconfig common/ksu_susfs_defconfig

      - name: "üòãAdd Network Optimizations"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          cat << EOF > common/network_defconfig
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_DEFAULT_TCP_CONG="bbr"
          CONFIG_TCP_CONG_CDG=y
          CONFIG_DEFAULT_BBR=y
          CONFIG_NET_SCH_DEFAULT=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_DEFAULT_FQ=y
          CONFIG_DEFAULT_NET_SCH="fq"
          CONFIG_NET_SCH_SFQ=y
          CONFIG_NET_SCH_FQ_CODEL=y
          CONFIG_NET_SCH_TBF=y
          CONFIG_TCP_CONG_HTCP=y
          CONFIG_IP_NF_TARGET_ECN=y
          CONFIG_IP_ECN=y
          CONFIG_TCP_ECN=y
          CONFIG_IPV6_ECN=y
          CONFIG_TCP_FASTOPEN=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          EOF
          ./scripts/kconfig/merge_config.sh -O common/arch/arm64/configs common/arch/arm64/configs/gki_defconfig common/network_defconfig

      - name: "üòãDisable Debug Modules"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          cat << EOF > common/debug_disable_defconfig
          CONFIG_EXT4_INODE_TEST=n
          CONFIG_F_FS_IPC_LOG=n
          CONFIG_HUNG_TASK_ENH=n
          CONFIG_IIO_TEST_FORMAT=n
          CONFIG_OPLUS_BSP_SIGKILL_DIAGNOSIS=n
          CONFIG_OPLUS_LOCK_TORTURE=n
          CONFIG_SOC_TOPOLOGY_TEST=n
          CONFIG_SOC_UTILS_TEST=n
          CONFIG_DEBUG_KERNEL=n
          CONFIG_DYNAMIC_DEBUG=n
          CONFIG_RCU_TRACE=n
          CONFIG_DEBUG_INFO=n
          EOF
          ./scripts/kconfig/merge_config.sh -O common/arch/arm64/configs common/arch/arm64/configs/gki_defconfig common/debug_disable_defconfig

      - name: "üé∂Run Config Modifications"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' ./common/arch/arm64/configs/gki_defconfig || echo "No LTO setting found!"
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' ./common/arch/arm64/configs/gki_defconfig || echo "No LTO_CLANG_FULL found!"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' ./common/arch/arm64/configs/gki_defconfig || echo "No LTO_CLANG_NONE found!"
          
          DATESTR=$(date -u)
          perl -pi -e "s{UTS_VERSION=\".*\"}{UTS_VERSION=\"#1 SMP PREEMPT $DATESTR\"}" ./common/scripts/mkcompile_h || echo "No mkcompile_h found!"

      - name: "üí´Add System Properties"
        run: |
          ANYKERNEL_DIR="${GITHUB_WORKSPACE}/AnyKernel3"
          PROP_FILE="${ANYKERNEL_DIR}/system/etc/system.prop"

          echo "Creating system properties file at $PROP_FILE..."
          mkdir -p "${ANYKERNEL_DIR}/system/etc"
          cat << 'EOF' > "$PROP_FILE"
          # CoreSight
          persist.debug.coresight.config=
          
          # QCOM Oryon CPU Optimizations
          dalvik.vm.isa.arm64.features=runtime
          dalvik.vm.isa.arm64.variant=oryon
          ro.bionic.cpu_variant=oryon
          
          # Log Control
          persist.logd.diag.tcpdump=false
          persist.sys.qseelogd=false
          persist.sys.ssr.enable_debug=false
          vendor.bluetooth.startbtlogger=false
          
          # QCOM DDR Power Saving
          vendor.chre.enabled=true
          
          # Dex2oat Optimizations
          dalvik.vm.background-dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.background-dex2oat-threads=8
          dalvik.vm.boot-dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.boot-dex2oat-threads=8
          dalvik.vm.dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.dex2oat-swap=true
          dalvik.vm.dex2oat-threads=8
          dalvik.vm.image-dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.image-dex2oat-threads=8
          dalvik.vm.restore-dex2oat-cpu-set=0,1,2,3,4,5,6,7
          dalvik.vm.restore-dex2oat-threads=8
          dalvik.vm.madvise.artfile.size=2147483647
          dalvik.vm.madvise.odexfile.size=2147483647
          dalvik.vm.madvise.vdexfile.size=2147483647
          dalvik.vm.systemservercompilerfilter=everything
          dalvik.vm.systemuicompilerfilter=everything
          
          # Dex2oat Trigger
          pm.dexopt.ab-ota=verify
          pm.dexopt.bg-dexopt=everything
          pm.dexopt.boot-after-ota=verify
          pm.dexopt.boot-after-mainline-update=verify
          pm.dexopt.cmdline=everything
          pm.dexopt.downgrade_after_inactive_days=30
          pm.dexopt.first-boot=verify
          pm.dexopt.first-use=verify
          pm.dexopt.inactive=verify
          pm.dexopt.install=everything
          pm.dexopt.install-bulk=everything
          pm.dexopt.install-bulk-downgraded=everything
          pm.dexopt.install-bulk-secondary=everything
          pm.dexopt.install-bulk-secondary-downgraded=everything
          pm.dexopt.install-fast=verify
          pm.dexopt.post-boot=verify
          pm.dexopt.shared=everything
          
          # ART Optimizations
          dalvik.vm.backgroundgctype=HSpaceCompact
          dalvik.vm.dex2oat-minidebuginfo=false
          dalvik.vm.foreground-heap-growth-multiplier=2.5
          dalvik.vm.gctype=CMC
          dalvik.vm.heapgrowthlimit=512m
          dalvik.vm.heapmaxfree=32m
          dalvik.vm.heapminfree=512k
          dalvik.vm.heapsize=512m
          dalvik.vm.heapstartsize=2m
          dalvik.vm.heaptargetutilization=0.8
          dalvik.vm.minidebuginfo=false
          dalvik.vm.usap_pool_enabled=true
          dalvik.vm.usap_pool_refill_delay_ms=3000
          dalvik.vm.usap_pool_size_max=3
          dalvik.vm.usap_pool_size_min=1
          dalvik.vm.usap_refill_threshold=1
          persist.device_config.aconfig_flags.runtime_native_boot.disable_lock_profiling=true
          persist.device_config.runtime_native_boot.enable_generational_cc=true
          persist.device_config.runtime_native.usap_pool_enabled=true
          ro.dalvik.vm.enable_uffd_gc=true
          vendor.oplus.dalvik.vm.heapgrowthlimit=512m
          vendor.oplus.dalvik.vm.heapmaxfree=32m
          vendor.oplus.dalvik.vm.heapminfree=512k
          vendor.oplus.dalvik.vm.heapsize=512m
          vendor.oplus.dalvik.vm.heapstartsize=2m
          vendor.oplus.dalvik.vm.heaptargetutilization=0.8
          
          # LMKD
          persist.device_config.aconfig_flags.lmkd_native.use_minfree_levels=false
          persist.device_config.lmkd_native.use_minfree_levels=false
          ro.lmk.psi_complete_stall_ms=900
          ro.lmk.psi_partial_stall_ms=300
          ro.lmk.swap_compression_ratio=5
          ro.lmk.swap_free_low_percentage=0
          ro.lmk.swap_util_max=100
          ro.lmk.use_new_strategy=1
          ro.lmk.use_psi=1
          persist.sys.lmk.oplus.kill_memleak_process=0
          persist.sys.oplus.lmkd_super_critical_threshold_8g=1
          persist.sys.oplus.lmkd_super_critical_threshold_12g=1
          persist.sys.oplus.lmkd_super_critical_threshold_16g=1
          persist.sys.oplus.lmkd_super_critical_threshold_24g=1
          persist.sys.oplus.lmkd_super_critical_threshold_rus_8g=1
          persist.sys.oplus.lmkd_super_critical_threshold_rus_12g=1
          persist.sys.oplus.lmkd_super_critical_threshold_rus_16g=1
          persist.sys.oplus.lmkd_super_critical_threshold_rus_24g=1
          sys.lmk.oplus.force_use_old_strategy=0
          sys.oplus.lmk.anon.opt=0
          sys.oplus.lmk.change_limit=0
          sys.oplus.lmk_killed_memleak_pid=0
          ro.lmk.enable_watermark_check=0
          ro.lmk.filecache_min_kb=4
          ro.lmk.nstrat_psi_complete_ms=850
          ro.lmk.nstrat_psi_partial_ms=250
          ro.lmk.nstrat_wmark_boost_factor=15000
          ro.lmk.psi_scrit_complete_stall_ms=999
          ro.lmk.super_critical=0
          ro.lmk.use_new_strategy_dup=1
          ro.lmk.use_minfree_levels_dup=0
          
          # AppCompact
          persist.sys.use_boot_compact=false
          
          # SurfaceFlinger
          debug.sf.auto_latch_unsignaled=0
          debug.sf.latch_unsignaled=1
          ro.surface_flinger.use_content_detection_for_refresh_rate=false
          
          # RenderEngine
          debug.renderengine.backend=skiavkthreaded
          debug.renderengine.vulkan=true
          debug.stagefright.renderengine.backend=threaded
          persist.sys.force_sw_gles=0
          ro.hwui.use_vulkan=1
          
          # FramePacing
          vendor.perf.framepacing.enable=0
          
          # MGLRU
          persist.device_config.mglru_native.lru_gen_config=all
          
          # Debug/Tracing
          debug.oplus.labmode_sys_ostats_trigger_trace=0
          debug.oplus.labmode_data_ostats_continuous_trace=0
          debug.ostats.bds.enable=0
          debug.trace_size_limit_enable=true
          sys.olc.service.on=false
          sys.oplus.voldraise2olc=false
          debug.sf.oplus_display_trace.enable=false
          debug.vendor.perf.smart_touch.trace=false
          persist.sys.oplus.need_log=false
          persist.sys.ostats_pullerd.enable=false
          persist.sys.ostats_tpd.enable=false
          persist.sys.ostatsd.enable=false
          persist.vendor.corectl.debug.config=false
          persist.vendor.sys.rawdump_copy=false
          persist.vendor.tracing.hsuart.enabled=false
          ro.oplus.minidump.kernel.log.support=false
          ro.oplus.wifi.minidump.enable.state=false
          persist.sys.assert.state=false
          persist.sys.alwayson.enable=false
          persist.sys.debug.layer_trace.enable=false
          persist.sys.oplus.perfrecord=false
          persist.sys.oplus_trace=0
          persist.sys.oplus.theia_screen_monitor.disabled=1
          persist.sys.oplus.ostats.labmode.enable=0
          persist.sys.oplus.cvt.manager=0
          persist.sys.ood.enable=0
          persist.sys.midasd.enable=0
          persist.vendor.ims.disableDebugLogs=1
          persist.vendor.ims.disableIMSLogs=1
          persist.vendor.ims.disableQXDMLogs=1
          
          # Scheduler/Freq Controllers
          persist.sys.janktracker.enable=false
          persist.sys.obrain_obfuscate.enable=false
          persist.sys.ocenter.enable=false
          persist.sys.oiface.enable=false
          persist.sys.oplus.opt.ui_thread=false
          ro.oplus.camera.defercap.support=false
          
          # Thermal
          oplus.dex.tempcontrol=false
          persist.sys.oplus.wifi.sla.game_high_temperature=100
          ro.oplus.audio.thermal_control=false
          
          # Memory Management
          persist.sys.osense.dump=true
          ro.oplus.osense.uaf_enable=false
          persist.oplus.ocompiler=0
          persist.oplus.zygote_ocomp=0
          persist.vendor.enable.preload=false
          sys.oplus.vm.oplus_compact_memory=0
          sys.priority.optimize.enable=0
          
          # Misc
          persist.sys.hardcoder.name=
          persist.sys.oem_smooth=false
          persist.sys.oplus.cvt.manager=false
          persist.sys.oppo.junkmonitor=false
          persist.sys.tasktracker.enable=false
          sys.oplus.cvt.enable=false
          EOF
          chmod 644 "$PROP_FILE"
          echo "System properties file created successfully"

      - name: "‚öôÔ∏èConfigure AnyKernel3 to Apply Network Settings and System Properties"
        run: |
          ANYKERNEL_DIR="${GITHUB_WORKSPACE}/AnyKernel3"
          ANYKERNEL_SCRIPT="${ANYKERNEL_DIR}/anykernel.sh"

          if [ ! -f "$ANYKERNEL_SCRIPT" ]; then
            echo "Error: $ANYKERNEL_SCRIPT not found"
            exit 1
          fi

          cp "$ANYKERNEL_SCRIPT" "$ANYKERNEL_SCRIPT.bak"

          cat << 'EOF' >> "$ANYKERNEL_SCRIPT"

          # Apply network configurations
          ui_print "- Applying network configurations"
          write_boot
          if [ -f "$AKHOME/sysctl.conf" ]; then
            $BOOTMODE && ui_print "  Copying sysctl.conf to /system/etc/sysctl.d/"
            mkdir -p /system/etc/sysctl.d
            cp "$AKHOME/sysctl.conf" /system/etc/sysctl.d/99-network.conf
            chmod 644 /system/etc/sysctl.d/99-network.conf
            if command -v sysctl >/dev/null 2>&1; then
              sysctl -p /system/etc/sysctl.d/99-network.conf >/dev/null 2>&1 && ui_print "  Sysctl settings applied" || ui_print "  Warning: Failed to apply sysctl settings"
            else
              ui_print "  Warning: sysctl binary not found, settings will apply on boot"
            fi
          else
            ui_print "  Error: sysctl.conf not found in ZIP root"
          fi

          INTERFACE=$(ip link | grep -E 'wlan0|rmnet0' | awk '{print $2}' | cut -d':' -f1 | head -n1)
          if [ -n "$INTERFACE" ] && command -v ethtool >/dev/null 2>&1; then
            ethtool -C "$INTERFACE" rx-usecs 100 rx-frames 25 >/dev/null 2>&1 && ui_print "  Applied ethtool rx settings to $INTERFACE" || ui_print "  Warning: Failed to apply ethtool rx settings, may be unsupported"
            ethtool -C "$INTERFACE" tx-usecs 100 tx-frames 25 >/dev/null 2>&1 && ui_print "  Applied ethtool tx settings to $INTERFACE" || ui_print "  Warning: Failed to apply ethtool tx settings, may be unsupported"
            ethtool -K "$INTERFACE" gro on >/dev/null 2>&1 && ui_print "  Enabled GRO on $INTERFACE" || ui_print "  Warning: Failed to enable GRO"
          else
            ui_print "  Warning: ethtool or network interface not available, skipping interface tuning"
          fi

          mkdir -p /data/adb/service.d
          cat << EOT > /data/adb/service.d/network_tune.sh
          #!/system/bin/sh
          sleep 5
          INTERFACE=\$(ip link | grep -E 'wlan0|rmnet0' | awk '{print \$2}' | cut -d':' -f1 | head -n1)
          if [ -n "\$INTERFACE" ] && command -v ethtool >/dev/null 2>&1; then
            ethtool -C "\$INTERFACE" rx-usecs 100 rx-frames 25 >/dev/null 2>&1
            ethtool -C "\$INTERFACE" tx-usecs 100 tx-frames 25 >/dev/null 2>&1
            ethtool -K "\$INTERFACE" gro on >/dev/null 2>&1
          fi
          EOT
          chmod 755 /data/adb/service.d/network_tune.sh
          ui_print "  Created startup script for persistent network settings"

          ui_print "- Applying system properties"
          if [ -f "$AKHOME/system/etc/system.prop" ]; then
            $BOOTMODE && ui_print "  Copying system.prop to /system/etc/"
            mkdir -p /system/etc
            cp "$AKHOME/system/etc/system.prop" /system/etc/system.prop
            chmod 644 /system/etc/system.prop
            cat << EOT > /data/adb/service.d/system_prop.sh
          #!/system/bin/sh
          sleep 10
          while IFS='=' read -r key value; do
            case "\$key" in
              ''|'#'*) continue ;;
            esac
            key=\$(echo "\$key" | tr -d '[:space:]')
            value=\$(echo "\$value" | tr -d '[:space:]')
            if [ -n "\$key" ] && [ -n "\$value" ]; then
              setprop "\$key" "\$value" >/dev/null 2>&1
            elif [ -n "\$key" ] && [ -z "\$value" ]; then
              setprop "\$key" "" >/dev/null 2>&1
            fi
          done < /system/etc/system.prop
          EOT
            chmod 755 /data/adb/service.d/system_prop.sh
            ui_print "  Created startup script for persistent system properties"
          else
            ui_print "  Error: system.prop not found in ZIP root"
          fi
          EOF

          echo "Updated $ANYKERNEL_SCRIPT to apply network configurations and system properties"

      - name: "üêÇBuild the Kernel"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
          
          rm ./kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm ./kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          
          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
          if [ "${{ inputs.soc }}" == "sun" ]; then
            BUILD_TYPE="perf"
            BAZEL_ARGS+=(-g)
          fi
          
          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
            ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
          fi

      - name: "ü•∞Copy Images"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          cp ./out/dist/Image ../AnyKernel3/Image
          if [ "${{ inputs.model }}" == "OPAce5Pro" ]; then
            cp ./out/dist/dtbo.img ../AnyKernel3/
            cp ./out/dist/system_dlkm.erofs.img ../AnyKernel3/system_dlkm.img
          fi

      - name: "üêÇCreate ZIP Files"
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3
          
          ZIP_NAME="${{ inputs.model }}_${{ inputs.android_version }}_${{ inputs.kernel_version }}_Next_SUSFS_AnyKernel3.zip"
          zip -r "../$ZIP_NAME" ./*
          if [ "${{ inputs.model }}" == "OPAce5Pro" ]; then
            sed -i 's/hmbird/xxbird/g' dtbo.img
            zip -r "../$ZIP_NAME-CN-version.zip" ./*
          fi

      - name: "üí´Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
