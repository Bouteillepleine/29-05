name: Build OnePlus 13R

on:
  workflow_dispatch:
    inputs:
      SUFFIX:
        type: string
        description: "Custom kernel suffix (leave empty for random suffix)"
        required: false
        default: ""
      SUSFS_CI:
        type: boolean
        description: "Download SUSFS module from CI build?"
        required: true
        default: true
      VFS:
        type: boolean
        description: "Enable manual VFS hooks?"
        required: true
        default: true
      ZRAM:
        type: boolean
        description: "Enable additional ZRAM algorithms?"
        required: true
        default: false

env:
  ANDROID_VERSION: android14
  KERNEL_VERSION: 5.15

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl bc bison flex libssl-dev python3-pip
          pip3 install --user pyyaml

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/sm8650 -m oneplus_13r.xml --depth=1
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          if [ -e kernel_platform/common/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [ -e kernel_platform/msm-kernel/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android/*",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm -f kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Force remove -dirty suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version"

      - name: Modify setlocalversion suffix if SUFFIX is set
        if: ${{ github.event.inputs.SUFFIX != '' }}
        run: |
          cd kernel_workspace
          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do
              sed -i '/^res=/a res=$(echo "$res" | sed -E '\''s/-[0-9]+-o-g[0-9a-f]{7,}//'\'')' "$path"
              sed -i "\$s|echo \"\\\$res\"|echo \"\$res-${{ github.event.inputs.SUFFIX }}\"|" "$path"
          done
          git add -A
          git commit -m "Clean git describe suffix and append custom suffix: ${{ github.event.inputs.SUFFIX }}"

      - name: Generate random kernel suffix if SUFFIX is empty
        if: ${{ github.event.inputs.SUFFIX == '' }}
        run: |
          cd kernel_workspace
          RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
          RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
          RANDOM_SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}"
          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do
              sed -i '/^res=/a res=$(echo "$res" | sed -E '\''s/-[0-9]+-o-g[0-9a-fA-F]{7,}//g'\'')' "$path"
              sed -i "\$s|echo \"\\\$res\"|echo \"\$res-$RANDOM_SUFFIX\"|" "$path"
          done
          git add -A
          git commit -m "Fix: inject random suffix"

      - name: Add SukiSU-Ultra
        id: ksu_version
        run: |
          cd kernel_workspace
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=$KSU_VERSION/" kernel/Makefile

      - name: Apply SUSFS Patch for SukiSU-Ultra
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          echo "Applying SUSFS patches"
          SUSFS_PATCH=./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch
          if [ ! -f "$SUSFS_PATCH" ]; then
            echo "SUSFS patch not found: $SUSFS_PATCH"
            exit 1
          fi
          cp "$SUSFS_PATCH" ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ./SukiSU_patch/hooks/new_hooks.patch ./common/
          cd ./common
          if patch -p1 --dry-run < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch; then
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch
            echo "SUSFS patch applied successfully"
          else
            echo "Warning: SUSFS patch failed to apply cleanly, generating .rej files for review"
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            find . -name "*.rej" -exec echo "Rejected hunk in {}" \;
            echo "Continuing build despite patch failures; review .rej files to ensure SUSFS functionality"
          fi
          if patch -p1 --dry-run < new_hooks.patch; then
            patch -p1 < new_hooks.patch
            echo "New hooks patch applied successfully"
          else
            echo "Warning: New hooks patch failed to apply, generating .rej files for review"
            patch -p1 < new_hooks.patch || true
            find . -name "*.rej" -exec echo "Rejected hunk in {}" \;
            echo "Continuing build despite patch failures"
          fi

      - name: Apply Hide Stuff Patch
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "Applying hide stuff patch"
          if patch -p1 --dry-run -F 3 < 69_hide_stuff.patch; then
            patch -p1 -F 3 < 69_hide_stuff.patch
            echo "Hide stuff patch applied successfully"
          else
            echo "Hide stuff patch failed to apply, check .rej files for details"
            exit 1
          fi

      - name: Apply VFS
        if: ${{ github.event.inputs.VFS == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          VFS_PATCH=../../WildKernels/OnePlus_KernelSU_SUSFS/hooks/syscall_hooks.patch
          if [ ! -f "$VFS_PATCH" ]; then
            echo "VFS patch not found: $VFS_PATCH"
            exit 1
          fi
          cp "$VFS_PATCH" ./
          echo "Applying
